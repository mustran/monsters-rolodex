{"version":3,"sources":["components/CardList/cardList.module.css","components/CardList/Card/card.module.css","components/Search-box/searchBox.module.css","App.module.css","components/CardList/Card/Card.jsx","components/CardList/CardList.jsx","components/Search-box/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","monster","imageKey","className","styles","cardContainer","alt","src","name","style","textAlign","email","CardList","monsters","cardList","map","index","key","id","SearchBox","placeholder","handleChange","search","type","onChange","App","useState","setMonsters","searchTerm","setSearchTerm","useEffect","a","async","axios","then","res","data","result","fetchData","filterMonsters","filter","toLowerCase","includes","title","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,cAAgB,8B,mBCAlCD,EAAOC,QAAU,CAAC,OAAS,4B,2ECA3BD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,qB,8JCelCC,EAbF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACvB,OACE,yBAAKC,UAAWC,IAAOC,eACrB,yBACEC,IAAI,UACJC,IAAG,+BAA0BL,EAA1B,6BAEL,4BAAKD,EAAQO,MACb,uBAAGC,MAAO,CAAEC,UAAW,WAAaT,EAAQU,SCGnCC,EAVE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,yBAAKV,UAAWC,IAAOU,UACpBD,EAASE,KAAI,SAACd,EAASe,GAAV,OACZ,kBAAC,EAAD,CAAMC,IAAKhB,EAAQiB,GAAIjB,QAASA,EAASC,SAAUc,EAAQ,S,iBCMpDG,EAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,2BACElB,UAAWC,IAAOkB,OAClBC,KAAK,SACLH,YAAaA,EACbI,SAAUH,K,gBC2BDI,MA9Bf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNb,EADM,KACIc,EADJ,OAEuBD,mBAAS,IAFhC,mBAENE,EAFM,KAEMC,EAFN,KAIbC,qBAAU,YACU,mBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACKE,IACnB,8CACAC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAHF,OACVC,EADU,OAIhBV,EAAYU,GAJI,qCAMlBC,KACC,IAEH,IAAMC,EAAiB1B,EAAS2B,QAAO,SAAAvC,GAAO,OAC5CA,EAAQO,KAAKiC,cAAcC,SAASd,EAAWa,kBAGjD,OACE,yBAAKtC,UAAWC,IAAOqB,KACrB,wBAAItB,UAAWC,IAAOuC,OAAtB,oBACA,kBAAC,EAAD,CACEvB,YAAY,kBACZC,aAAc,SAAAuB,GAAC,OAAIf,EAAce,EAAEC,OAAOC,UAE5C,kBAAC,EAAD,CAAUjC,SAAU0B,MCnBNQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.c0164fad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardList\":\"cardList_cardList__2Owgu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContainer\":\"card_cardContainer__1Ay2g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"searchBox_search__FXgku\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"title\":\"App_title__-GfWs\"};","import React from \"react\";\nimport styles from \"./card.module.css\";\n\nconst Card = ({ monster, imageKey }) => {\n  return (\n    <div className={styles.cardContainer}>\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${imageKey}/?set=set2&size=180x180`}\n      />\n      <h1>{monster.name}</h1>\n      <p style={{ textAlign: \"center\" }}>{monster.email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport styles from \"./cardList.module.css\";\nimport Card from \"./Card/Card\";\n\nconst CardList = ({ monsters }) => {\n  return (\n    <div className={styles.cardList}>\n      {monsters.map((monster, index) => (\n        <Card key={monster.id} monster={monster} imageKey={index + 1}/>\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport styles from \"./searchBox.module.css\";\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className={styles.search}\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CardList from \"./components/CardList/CardList\";\nimport SearchBox from \"./components/Search-box/SearchBox\";\nimport styles from './App.module.css'\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        \"https://jsonplaceholder.typicode.com/users\"\n      ).then(res => res.data);\n      setMonsters(result);\n    };\n    fetchData();\n  }, []);\n\n  const filterMonsters = monsters.filter(monster =>\n    monster.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className={styles.App}>\n      <h1 className={styles.title}>Monsters Rolodex</h1>\n      <SearchBox\n        placeholder=\"search monsters\"\n        handleChange={e => setSearchTerm(e.target.value)}\n      />\n      <CardList monsters={filterMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}